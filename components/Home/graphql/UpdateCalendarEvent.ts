/*
 * ðŸ‘‹ Hey there!
 * This file is auto-generated by @graphql-codegen.
 * Don't edit it manually or your changes will be lost.
 */

import * as Types from '../../../graphql/types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type UpdateCalendarEventMutationVariables = Types.Exact<{
  input: Types.CalendarEventUpdateInput;
}>;


export type UpdateCalendarEventMutation = { __typename?: 'Mutation', calendarEventUpdate?: { __typename?: 'CalendarEvent', id: number, time: any, name: string, duration: number } | null | undefined };


export const UpdateCalendarEventDocument = gql`
    mutation UpdateCalendarEvent($input: CalendarEventUpdateInput!) {
  calendarEventUpdate(input: $input) {
    id
    time
    name
    duration
  }
}
    `;
export type UpdateCalendarEventMutationFn = Apollo.MutationFunction<UpdateCalendarEventMutation, UpdateCalendarEventMutationVariables>;

/**
 * __useUpdateCalendarEventMutation__
 *
 * To run a mutation, you first call `useUpdateCalendarEventMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCalendarEventMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCalendarEventMutation, { data, loading, error }] = useUpdateCalendarEventMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateCalendarEventMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCalendarEventMutation, UpdateCalendarEventMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCalendarEventMutation, UpdateCalendarEventMutationVariables>(UpdateCalendarEventDocument, options);
      }
export type UpdateCalendarEventMutationHookResult = ReturnType<typeof useUpdateCalendarEventMutation>;
export type UpdateCalendarEventMutationResult = Apollo.MutationResult<UpdateCalendarEventMutation>;
export type UpdateCalendarEventMutationOptions = Apollo.BaseMutationOptions<UpdateCalendarEventMutation, UpdateCalendarEventMutationVariables>;