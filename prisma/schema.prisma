// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id       Int       @id @default(autoincrement())
  name     String?
  time     DateTime?
  duration Int       @default(30)
  complete Boolean   @default(false)
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  tasks         Task[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// NextAuth Account Model
// Note: Some fields are snake_case because at the time of writing this comment,
//       that is the recommended schema for the NextAuth+Prisma adapter.
model Account {
  id                       Int     @id @default(autoincrement())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   Int

  @@unique([provider, providerAccountId])
}

// NextAuth Session Model
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth Verification Token Model
model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
